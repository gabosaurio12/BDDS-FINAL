package veterinaria.view;

import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import veterinaria.businesslogic.dao.DireccionVeterinarioDAO;
import veterinaria.businesslogic.dao.VeterinarioDAO;
import veterinaria.businesslogic.dto.DireccionVeterinarioDTO;
import veterinaria.businesslogic.dto.VeterinarioDTO;

/**
 *
 * @author User
 */
public class GUIRegistroVeterinario extends javax.swing.JFrame {

    private boolean modoEdicion = false;
    private int cedulaOriginal = 0;
    private static final Logger logger = LogManager.getLogger(GUIRegistroVeterinario.class);

    public GUIRegistroVeterinario() {
        initComponents();
    }
    
    public GUIRegistroVeterinario(int cedula) {
        initComponents();
        this.modoEdicion = true;
        this.cedulaOriginal = cedula;
        configurarVentana();
        cargarDatosVeterinario(cedula);
    }
    private void configurarVentana() {
        if (modoEdicion) {
            setTitle("Editar Veterinario");
            botonGuardar.setText("Actualizar");
            // Deshabilitar el campo cédula en modo edición
            textCedula.setEnabled(false);
            textNombre.setEnabled(false);
        } else {
            setTitle("Registrar Veterinario");
            botonGuardar.setText("Guardar");
            textCedula.setEnabled(true);
        }
    }
    
    private void cargarDatosVeterinario(int cedula) {
        try {
            VeterinarioDAO veterinarioDAO = new VeterinarioDAO();
            DireccionVeterinarioDAO direccionDAO = new DireccionVeterinarioDAO();

            VeterinarioDTO veterinario = veterinarioDAO.seleccionarVeterinarioPorCedula(cedula);

            if (veterinario != null) {
                textCedula.setText(String.valueOf(veterinario.getCedula()));
                textNombre.setText(veterinario.getNombreCompleto());
                textTelefono.setText(veterinario.getTelefono());

                List<DireccionVeterinarioDTO> direcciones = direccionDAO.obtenerDireccionesPorCedula(cedula);
                if (!direcciones.isEmpty()) {
                    DireccionVeterinarioDTO direccion = direcciones.get(0);
                    textCalle.setText(direccion.getCalle());
                    textColonia.setText(direccion.getColonia());
                    textNumero.setText(direccion.getNumero());
                }

                logger.info("Datos del veterinario cargados para edición. Cédula: {}", cedula);
            } else {
                JOptionPane.showMessageDialog(this, 
                    "No se encontraron datos del veterinario.", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
                dispose();
            }

        } catch (SQLException e) {
            logger.error("Error al cargar datos del veterinario: ", e);
            JOptionPane.showMessageDialog(this, 
                "Error al cargar los datos: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        textCedula = new javax.swing.JTextField();
        textNombre = new javax.swing.JTextField();
        textTelefono = new javax.swing.JTextField();
        textCalle = new javax.swing.JTextField();
        textColonia = new javax.swing.JTextField();
        textNumero = new javax.swing.JTextField();
        botonGuardar = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Datos Veterinario");

        jLabel2.setText("Cedula");

        jLabel3.setText("Nombre");

        jLabel4.setText("Telefono");

        jLabel5.setText("Calle");

        jLabel6.setText("Colonia");

        jLabel7.setText("Numero");

        textColonia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textColoniaActionPerformed(evt);
            }
        });

        textNumero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNumeroActionPerformed(evt);
            }
        });

        botonGuardar.setText("Guardar");
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });

        botonCancelar.setText("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(34, 34, 34)
                                .addComponent(textCalle, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textTelefono))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(textColonia, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(textNombre))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(textCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(botonGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonCancelar)
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(textCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(textNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(textTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(textCalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(textColonia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(textNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(73, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonGuardar)
                            .addComponent(botonCancelar))
                        .addGap(25, 25, 25))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textColoniaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textColoniaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textColoniaActionPerformed

    private void textNumeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNumeroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNumeroActionPerformed

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        int confirmacion = JOptionPane.showConfirmDialog(this, 
        "¿Está seguro que desea cancelar? Se perderán los cambios no guardados.", 
        "Confirmar cancelación", 
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE);
    
        if (confirmacion == JOptionPane.YES_OPTION) {
            regresarAVentanaAnterior();
        }

    }//GEN-LAST:event_botonCancelarActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        try {
        // Validar campos obligatorios
        if (!validarCampos()) {
            return;
        }
        
        if (modoEdicion) {
            actualizarVeterinario();
        } else {
            registrarVeterinario();
        }
        
    } catch (Exception e) {
        logger.error("Error en operación de veterinario: ", e);
        JOptionPane.showMessageDialog(this, 
            "Error inesperado: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
    }
}

// MÉTODO PARA VALIDAR CAMPOS
private boolean validarCampos() {
    // Validar cédula (solo en modo registro)
    if (!modoEdicion) {
        if (textCedula.getText().trim().isEmpty()) {
            mostrarError("La cédula es obligatoria.");
            textCedula.requestFocus();
            return false;
        }
        
        try {
            int cedula = Integer.parseInt(textCedula.getText().trim());
            if (cedula <= 0) {
                mostrarError("La cédula debe ser un número positivo.");
                textCedula.requestFocus();
                return false;
            }
        } catch (NumberFormatException e) {
            mostrarError("La cédula debe ser un número válido.");
            textCedula.requestFocus();
            return false;
        }
    }
    
    // Validar nombre
    if (textNombre.getText().trim().isEmpty()) {
        mostrarError("El nombre completo es obligatorio.");
        textNombre.requestFocus();
        return false;
    }
    
    // Validar teléfono
    if (textTelefono.getText().trim().isEmpty()) {
        mostrarError("El teléfono es obligatorio.");
        textTelefono.requestFocus();
        return false;
    }
    
    // Validación básica de teléfono (solo números y guiones)
    String telefono = textTelefono.getText().trim();
    if (!telefono.matches("[0-9\\-\\s\\(\\)\\+]+")) {
        mostrarError("El teléfono contiene caracteres no válidos.");
        textTelefono.requestFocus();
        return false;
    }
    
    return true;

    }//GEN-LAST:event_botonGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIRegistroVeterinario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIRegistroVeterinario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIRegistroVeterinario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIRegistroVeterinario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIRegistroVeterinario().setVisible(true);
            }
        });
    }
    private void limpiarCampos() {
    textCedula.setText("");
    textNombre.setText("");
    textTelefono.setText("");
    textCalle.setText("");
    textColonia.setText("");
    textNumero.setText("");
    }
    
    private void regresarAVentanaAnterior() {
    GUICRUDVeterinario ventanaCRUD = new GUICRUDVeterinario();
    ventanaCRUD.inicializarVentana();
    ventanaCRUD.setVisible(true);
    this.dispose();
    }
    
    private void actualizarVeterinario() {
        try {
            String nombre = textNombre.getText().trim();
            String telefono = textTelefono.getText().trim();

            VeterinarioDTO veterinario = new VeterinarioDTO(cedulaOriginal, nombre, telefono, null);

            VeterinarioDAO veterinarioDAO = new VeterinarioDAO();
            boolean veterinarioActualizado = veterinarioDAO.actualizarVeterinario(veterinario);

            if (veterinarioActualizado) {
                actualizarDireccion(cedulaOriginal);

                JOptionPane.showMessageDialog(this, 
                    "Veterinario actualizado exitosamente.", 
                    "Éxito", 
                    JOptionPane.INFORMATION_MESSAGE);

                logger.info("Veterinario actualizado exitosamente. Cédula: {}", cedulaOriginal);
                regresarAVentanaAnterior();

            } else {
                mostrarError("No se pudo actualizar el veterinario.");
            }

        } catch (SQLException e) {
            logger.error("Error al actualizar veterinario: ", e);
            mostrarError("Error en la base de datos: " + e.getMessage());
        }
    }
    
    private boolean hayDatosDireccion() {
        return !textCalle.getText().trim().isEmpty() || 
               !textColonia.getText().trim().isEmpty() || 
               !textNumero.getText().trim().isEmpty();
    }
    
    private void insertarDireccion(int cedula) throws SQLException {
        if (hayDatosDireccion()) {
            DireccionVeterinarioDTO direccion = new DireccionVeterinarioDTO(
                0, // idCasa se genera automáticamente
                textNumero.getText().trim(),
                textCalle.getText().trim(),
                textColonia.getText().trim(),
                cedula
            );

            DireccionVeterinarioDAO direccionDAO = new DireccionVeterinarioDAO();
            direccionDAO.insertarDireccionVeterinario(direccion);
        }
    }
    
    private void mostrarError(String mensaje) {
    JOptionPane.showMessageDialog(this, mensaje, "Error de validación", JOptionPane.ERROR_MESSAGE);
    }
    
    private void registrarVeterinario() {
        try {
            int cedula = Integer.parseInt(textCedula.getText().trim());
            String nombre = textNombre.getText().trim();
            String telefono = textTelefono.getText().trim();

            // Crear DTO del veterinario
            VeterinarioDTO veterinario = new VeterinarioDTO(cedula, nombre, telefono, null);

            // Insertar veterinario
            VeterinarioDAO veterinarioDAO = new VeterinarioDAO();
            boolean veterinarioInsertado = veterinarioDAO.insertarVeterinario(veterinario);

            if (veterinarioInsertado) {
                // Si hay datos de dirección, insertarla
                if (hayDatosDireccion()) {
                    insertarDireccion(cedula);
                }

                JOptionPane.showMessageDialog(this, 
                    "Veterinario registrado exitosamente.\nNombre de usuario generado: " + veterinario.getNombreDeUsuario(), 
                    "Éxito", 
                    JOptionPane.INFORMATION_MESSAGE);

                logger.info("Veterinario registrado exitosamente. Cédula: {}, Usuario: {}", 
                    cedula, veterinario.getNombreDeUsuario());

                regresarAVentanaAnterior();

            } else {
                mostrarError("No se pudo registrar el veterinario. Verifique que la cédula no esté duplicada.");
            }

        } catch (SQLException e) {
            logger.error("Error al registrar veterinario: ", e);
            if (e.getMessage().contains("Duplicate entry")) {
                mostrarError("Ya existe un veterinario con esa cédula.");
            } else {
                mostrarError("Error en la base de datos: " + e.getMessage());
            }
        }
    }
    
    private void actualizarDireccion(int cedula) throws SQLException {
        DireccionVeterinarioDAO direccionDAO = new DireccionVeterinarioDAO();
        List<DireccionVeterinarioDTO> direccionesExistentes = direccionDAO.obtenerDireccionesPorCedula(cedula);

        if (hayDatosDireccion()) {
            if (!direccionesExistentes.isEmpty()) {
                // Actualizar la primera dirección existente
                DireccionVeterinarioDTO direccion = direccionesExistentes.get(0);
                direccion.setCalle(textCalle.getText().trim());
                direccion.setColonia(textColonia.getText().trim());
                direccion.setNumero(textNumero.getText().trim());

                direccionDAO.actualizarDireccionVeterinario(direccion);
            } else {
                // Insertar nueva dirección
                insertarDireccion(cedula);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField textCalle;
    private javax.swing.JTextField textCedula;
    private javax.swing.JTextField textColonia;
    private javax.swing.JTextField textNombre;
    private javax.swing.JTextField textNumero;
    private javax.swing.JTextField textTelefono;
    // End of variables declaration//GEN-END:variables
}
